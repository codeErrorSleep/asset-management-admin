// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	equipmentclass "be/api/internal/handler/equipmentclass"
	equipmentdetail "be/api/internal/handler/equipmentdetail"
	tower "be/api/internal/handler/tower"
	towerequipment "be/api/internal/handler/towerequipment"
	user "be/api/internal/handler/user"
	"be/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/tower-detail",
				Handler: tower.CreateTowerDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/tower-detail/:id",
				Handler: tower.UpdateTowerDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/tower-detail/:id",
				Handler: tower.GetTowerDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/tower-details",
				Handler: tower.ListTowerDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/tower-detail/:id",
				Handler: tower.DeleteTowerDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/tower-equipment/list",
				Handler: towerequipment.ListEquipmentByTowerIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/tower-equipment",
				Handler: towerequipment.CreateTowerEquipmentHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/tower-equipment/:id",
				Handler: towerequipment.DeleteTowerEquipmentHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/equipment-class",
				Handler: equipmentclass.CreateEquipmentClassHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/equipment-class/:id",
				Handler: equipmentclass.UpdateEquipmentClassHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-class/:id",
				Handler: equipmentclass.GetEquipmentClassHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-classes",
				Handler: equipmentclass.ListEquipmentClassesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/equipment-class/:id",
				Handler: equipmentclass.DeleteEquipmentClassHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/equipment-detail",
				Handler: equipmentdetail.CreateEquipmentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/equipment-detail/:id",
				Handler: equipmentdetail.UpdateEquipmentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-detail/:id",
				Handler: equipmentdetail.GetEquipmentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-details",
				Handler: equipmentdetail.ListEquipmentDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/equipment-detail/:id",
				Handler: equipmentdetail.DeleteEquipmentDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/auth/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/auth/captcha",
				Handler: user.UserCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/auth/logout",
				Handler: user.UserLogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/auth/password",
				Handler: user.UserPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user",
				Handler: user.UserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user",
				Handler: user.UserAddHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user/:id",
				Handler: user.UserDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/user/password/reset/:id",
				Handler: user.UserUpdatePasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/user/:id",
				Handler: user.UserUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/user/profile/:id",
				Handler: user.UserProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/detail",
				Handler: user.UserDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/role",
				Handler: user.RoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role",
				Handler: user.RoleAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/role/:id",
				Handler: user.RoleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/role/:id",
				Handler: user.RoleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/role/users/add/:id",
				Handler: user.RoleAddUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/role/users/remove/:id",
				Handler: user.RoleRemoveUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/role/page",
				Handler: user.RoleListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/role/permissions/tree",
				Handler: user.RolePermissionsTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/permission",
				Handler: user.PermissionAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/permission/:id",
				Handler: user.PermissionPatchHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/permission/:id",
				Handler: user.PermissionDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/permission/tree",
				Handler: user.PermissionListTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/permission/menu/tree",
				Handler: user.PermissionMenuTreeHandler(serverCtx),
			},
		},
	)
}
