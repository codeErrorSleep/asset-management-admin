// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	equipmentclass "be/api/internal/handler/equipmentclass"
	equipmentdetail "be/api/internal/handler/equipmentdetail"
	tower "be/api/internal/handler/tower"
	towerequipment "be/api/internal/handler/towerequipment"
	"be/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/tower-detail",
				Handler: tower.CreateTowerDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/tower-detail/:id",
				Handler: tower.UpdateTowerDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/tower-detail/:id",
				Handler: tower.GetTowerDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/tower-details",
				Handler: tower.ListTowerDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/tower-detail/:id",
				Handler: tower.DeleteTowerDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/tower-equipment/list",
				Handler: towerequipment.ListEquipmentByTowerIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/tower-equipment",
				Handler: towerequipment.CreateTowerEquipmentHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/tower-equipment/:id",
				Handler: towerequipment.DeleteTowerEquipmentHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/equipment-class",
				Handler: equipmentclass.CreateEquipmentClassHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/equipment-class/:id",
				Handler: equipmentclass.UpdateEquipmentClassHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-class/:id",
				Handler: equipmentclass.GetEquipmentClassHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-classes",
				Handler: equipmentclass.ListEquipmentClassesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/equipment-class/:id",
				Handler: equipmentclass.DeleteEquipmentClassHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/equipment-detail",
				Handler: equipmentdetail.CreateEquipmentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/equipment-detail/:id",
				Handler: equipmentdetail.UpdateEquipmentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-detail/:id",
				Handler: equipmentdetail.GetEquipmentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/equipment-details",
				Handler: equipmentdetail.ListEquipmentDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/equipment-detail/:id",
				Handler: equipmentdetail.DeleteEquipmentDetailHandler(serverCtx),
			},
		},
	)
}
