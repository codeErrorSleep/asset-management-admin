// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tBaseStationEquipmentFieldNames          = builder.RawFieldNames(&TBaseStationEquipment{})
	tBaseStationEquipmentRows                = strings.Join(tBaseStationEquipmentFieldNames, ",")
	tBaseStationEquipmentRowsExpectAutoSet   = strings.Join(stringx.Remove(tBaseStationEquipmentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tBaseStationEquipmentRowsWithPlaceHolder = strings.Join(stringx.Remove(tBaseStationEquipmentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tBaseStationEquipmentModel interface {
		Insert(ctx context.Context, data *TBaseStationEquipment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TBaseStationEquipment, error)
		Update(ctx context.Context, data *TBaseStationEquipment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTBaseStationEquipmentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TBaseStationEquipment struct {
		Id                int64          `db:"id"`
		BaseStationId     int64          `db:"base_station_id"`     // 基站id
		EquipmentDetailId int64          `db:"equipment_detail_id"` // 设备详情id
		ConfirmTime       sql.NullTime   `db:"confirm_time"`        // 确认时间,录入时间
		Image             sql.NullString `db:"image"`               // 图片 拍的时候的详情图片
		CheckTime         sql.NullTime   `db:"check_time"`          // 扫描时间
	}
)

func newTBaseStationEquipmentModel(conn sqlx.SqlConn) *defaultTBaseStationEquipmentModel {
	return &defaultTBaseStationEquipmentModel{
		conn:  conn,
		table: "`t_base_station_equipment`",
	}
}

func (m *defaultTBaseStationEquipmentModel) withSession(session sqlx.Session) *defaultTBaseStationEquipmentModel {
	return &defaultTBaseStationEquipmentModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_base_station_equipment`",
	}
}

func (m *defaultTBaseStationEquipmentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTBaseStationEquipmentModel) FindOne(ctx context.Context, id int64) (*TBaseStationEquipment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tBaseStationEquipmentRows, m.table)
	var resp TBaseStationEquipment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTBaseStationEquipmentModel) Insert(ctx context.Context, data *TBaseStationEquipment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tBaseStationEquipmentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BaseStationId, data.EquipmentDetailId, data.ConfirmTime, data.Image, data.CheckTime)
	return ret, err
}

func (m *defaultTBaseStationEquipmentModel) Update(ctx context.Context, data *TBaseStationEquipment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tBaseStationEquipmentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BaseStationId, data.EquipmentDetailId, data.ConfirmTime, data.Image, data.CheckTime, data.Id)
	return err
}

func (m *defaultTBaseStationEquipmentModel) tableName() string {
	return m.table
}
