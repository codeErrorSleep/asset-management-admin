// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tEquipmentClassFieldNames          = builder.RawFieldNames(&TEquipmentClass{})
	tEquipmentClassRows                = strings.Join(tEquipmentClassFieldNames, ",")
	tEquipmentClassRowsExpectAutoSet   = strings.Join(stringx.Remove(tEquipmentClassFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tEquipmentClassRowsWithPlaceHolder = strings.Join(stringx.Remove(tEquipmentClassFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tEquipmentClassModel interface {
		Insert(ctx context.Context, data *TEquipmentClass) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TEquipmentClass, error)
		Update(ctx context.Context, data *TEquipmentClass) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTEquipmentClassModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TEquipmentClass struct {
		Id     int64         `db:"id"`
		Name   string        `db:"name"`   // 名称
		Code   string        `db:"code"`   // 代码
		Status int64         `db:"status"` // 状态
		PId    sql.NullInt64 `db:"p_id"`   // 父类id
	}
)

func newTEquipmentClassModel(conn sqlx.SqlConn) *defaultTEquipmentClassModel {
	return &defaultTEquipmentClassModel{
		conn:  conn,
		table: "`t_equipment_class`",
	}
}

func (m *defaultTEquipmentClassModel) withSession(session sqlx.Session) *defaultTEquipmentClassModel {
	return &defaultTEquipmentClassModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_equipment_class`",
	}
}

func (m *defaultTEquipmentClassModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTEquipmentClassModel) FindOne(ctx context.Context, id int64) (*TEquipmentClass, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tEquipmentClassRows, m.table)
	var resp TEquipmentClass
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTEquipmentClassModel) Insert(ctx context.Context, data *TEquipmentClass) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tEquipmentClassRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.Status, data.PId)
	return ret, err
}

func (m *defaultTEquipmentClassModel) Update(ctx context.Context, data *TEquipmentClass) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tEquipmentClassRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.Status, data.PId, data.Id)
	return err
}

func (m *defaultTEquipmentClassModel) tableName() string {
	return m.table
}
