// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tBaseStationFieldNames          = builder.RawFieldNames(&TBaseStation{})
	tBaseStationRows                = strings.Join(tBaseStationFieldNames, ",")
	tBaseStationRowsExpectAutoSet   = strings.Join(stringx.Remove(tBaseStationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tBaseStationRowsWithPlaceHolder = strings.Join(stringx.Remove(tBaseStationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tBaseStationModel interface {
		Insert(ctx context.Context, data *TBaseStation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TBaseStation, error)
		Update(ctx context.Context, data *TBaseStation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTBaseStationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TBaseStation struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`          // 基站名称
		Address     string         `db:"address"`       // 详细地区
		Image       sql.NullString `db:"image"`         // 基站图片，考虑是否支持展示多张
		CheckStatus sql.NullString `db:"check_status"`  // 检查状态
		CheckTime   sql.NullTime   `db:"check_time"`    // 检查时间
		CheckUserId sql.NullInt64  `db:"check_user_id"` // 检查人id
		PrincipalId sql.NullInt64  `db:"principal_id"`  // 负责人id
		PlanTime    sql.NullTime   `db:"plan_time"`     // 计划检查时间
		CreateTime  time.Time      `db:"create_time"`   // 创建时间
		UpdateTime  time.Time      `db:"update_time"`   // 更新时间
	}
)

func newTBaseStationModel(conn sqlx.SqlConn) *defaultTBaseStationModel {
	return &defaultTBaseStationModel{
		conn:  conn,
		table: "`t_base_station`",
	}
}

func (m *defaultTBaseStationModel) withSession(session sqlx.Session) *defaultTBaseStationModel {
	return &defaultTBaseStationModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_base_station`",
	}
}

func (m *defaultTBaseStationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTBaseStationModel) FindOne(ctx context.Context, id int64) (*TBaseStation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tBaseStationRows, m.table)
	var resp TBaseStation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTBaseStationModel) Insert(ctx context.Context, data *TBaseStation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, tBaseStationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Address, data.Image, data.CheckStatus, data.CheckTime, data.CheckUserId, data.PrincipalId, data.PlanTime)
	return ret, err
}

func (m *defaultTBaseStationModel) Update(ctx context.Context, data *TBaseStation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tBaseStationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Address, data.Image, data.CheckStatus, data.CheckTime, data.CheckUserId, data.PrincipalId, data.PlanTime, data.Id)
	return err
}

func (m *defaultTBaseStationModel) tableName() string {
	return m.table
}
