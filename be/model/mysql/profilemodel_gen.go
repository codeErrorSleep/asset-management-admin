// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	profileFieldNames          = builder.RawFieldNames(&Profile{})
	profileRows                = strings.Join(profileFieldNames, ",")
	profileRowsExpectAutoSet   = strings.Join(stringx.Remove(profileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	profileRowsWithPlaceHolder = strings.Join(stringx.Remove(profileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	profileModel interface {
		Insert(ctx context.Context, data *Profile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Profile, error)
		Update(ctx context.Context, data *Profile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProfileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Profile struct {
		Id       int64          `db:"id"`
		Gender   sql.NullInt64  `db:"gender"`
		Avatar   string         `db:"avatar"`
		Address  sql.NullString `db:"address"`
		Email    sql.NullString `db:"email"`
		UserId   int64          `db:"userId"`
		NickName sql.NullString `db:"nickName"`
	}
)

func newProfileModel(conn sqlx.SqlConn) *defaultProfileModel {
	return &defaultProfileModel{
		conn:  conn,
		table: "`profile`",
	}
}

func (m *defaultProfileModel) withSession(session sqlx.Session) *defaultProfileModel {
	return &defaultProfileModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`profile`",
	}
}

func (m *defaultProfileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProfileModel) FindOne(ctx context.Context, id int64) (*Profile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", profileRows, m.table)
	var resp Profile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProfileModel) Insert(ctx context.Context, data *Profile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, profileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Gender, data.Avatar, data.Address, data.Email, data.UserId, data.NickName)
	return ret, err
}

func (m *defaultProfileModel) Update(ctx context.Context, data *Profile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, profileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Gender, data.Avatar, data.Address, data.Email, data.UserId, data.NickName, data.Id)
	return err
}

func (m *defaultProfileModel) tableName() string {
	return m.table
}
