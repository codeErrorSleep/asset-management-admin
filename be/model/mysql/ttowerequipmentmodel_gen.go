// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTowerEquipmentFieldNames          = builder.RawFieldNames(&TTowerEquipment{})
	tTowerEquipmentRows                = strings.Join(tTowerEquipmentFieldNames, ",")
	tTowerEquipmentRowsExpectAutoSet   = strings.Join(stringx.Remove(tTowerEquipmentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tTowerEquipmentRowsWithPlaceHolder = strings.Join(stringx.Remove(tTowerEquipmentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tTowerEquipmentModel interface {
		Insert(ctx context.Context, data *TTowerEquipment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TTowerEquipment, error)
		Update(ctx context.Context, data *TTowerEquipment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTTowerEquipmentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TTowerEquipment struct {
		Id          int64     `db:"id"`           // 主键ID
		TowerId     int64     `db:"tower_id"`     // 杆塔ID
		EquipmentId int64     `db:"equipment_id"` // 设备管理ID
		PrincipalId int64     `db:"principal_id"` // 负责人ID
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newTTowerEquipmentModel(conn sqlx.SqlConn) *defaultTTowerEquipmentModel {
	return &defaultTTowerEquipmentModel{
		conn:  conn,
		table: "`t_tower_equipment`",
	}
}

func (m *defaultTTowerEquipmentModel) withSession(session sqlx.Session) *defaultTTowerEquipmentModel {
	return &defaultTTowerEquipmentModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_tower_equipment`",
	}
}

func (m *defaultTTowerEquipmentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTTowerEquipmentModel) FindOne(ctx context.Context, id int64) (*TTowerEquipment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTowerEquipmentRows, m.table)
	var resp TTowerEquipment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTTowerEquipmentModel) Insert(ctx context.Context, data *TTowerEquipment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tTowerEquipmentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TowerId, data.EquipmentId, data.PrincipalId)
	return ret, err
}

func (m *defaultTTowerEquipmentModel) Update(ctx context.Context, data *TTowerEquipment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tTowerEquipmentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TowerId, data.EquipmentId, data.PrincipalId, data.Id)
	return err
}

func (m *defaultTTowerEquipmentModel) tableName() string {
	return m.table
}
